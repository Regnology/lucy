package net.regnology.lucy.web.rest.v1;

import java.net.URISyntaxException;
import java.util.List;
import net.regnology.lucy.domain.LibraryPerProduct;
import net.regnology.lucy.repository.LibraryPerProductCustomRepository;
import net.regnology.lucy.service.LibraryPerProductCustomService;
import net.regnology.lucy.service.LibraryPerProductQueryCustomService;
import net.regnology.lucy.service.criteria.LibraryPerProductCustomCriteria;
import net.regnology.lucy.web.rest.LibraryPerProductResource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import tech.jhipster.web.util.PaginationUtil;

/**
 * Custom REST controller for managing {@link LibraryPerProduct}
 * where changes are inserted that are different from the base class generated by the JHipster generator.<br>
 * API base path: {@code /api/v1}
 */
@RestController
@RequestMapping("/api/v1")
public class LibraryPerProductCustomResource extends LibraryPerProductResource {

    private final Logger log = LoggerFactory.getLogger(LibraryPerProductCustomResource.class);

    private final LibraryPerProductQueryCustomService libraryPerProductQueryCustomService;

    public LibraryPerProductCustomResource(
        LibraryPerProductCustomService libraryPerProductService,
        LibraryPerProductCustomRepository libraryPerProductRepository,
        LibraryPerProductQueryCustomService libraryPerProductQueryService,
        LibraryPerProductQueryCustomService libraryPerProductQueryCustomService
    ) {
        super(libraryPerProductService, libraryPerProductRepository, libraryPerProductQueryService);
        this.libraryPerProductQueryCustomService = libraryPerProductQueryCustomService;
    }

    /**
     * {@code POST  /library-per-products} : Create a new libraryPerProduct.
     *
     * @param libraryPerProduct the libraryPerProduct to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new libraryPerProduct, or with status {@code 400 (Bad Request)} if the libraryPerProduct has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/library-per-products")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LibraryPerProduct> createLibraryPerProduct(@RequestBody LibraryPerProduct libraryPerProduct)
        throws URISyntaxException {
        return super.createLibraryPerProduct(libraryPerProduct);
    }

    /**
     * {@code PUT  /library-per-products/:id} : Updates an existing libraryPerProduct.
     *
     * @param id the id of the libraryPerProduct to save.
     * @param libraryPerProduct the libraryPerProduct to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated libraryPerProduct,
     * or with status {@code 400 (Bad Request)} if the libraryPerProduct is not valid,
     * or with status {@code 500 (Internal Server Error)} if the libraryPerProduct couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/library-per-products/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LibraryPerProduct> updateLibraryPerProduct(
        @PathVariable(value = "id", required = false) final Long id,
        @RequestBody LibraryPerProduct libraryPerProduct
    ) throws URISyntaxException {
        return super.updateLibraryPerProduct(id, libraryPerProduct);
    }

    /**
     * {@code PATCH  /library-per-products/:id} : Partial updates given fields of an existing libraryPerProduct, field will ignore if it is null
     *
     * @param id the id of the libraryPerProduct to save.
     * @param libraryPerProduct the libraryPerProduct to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated libraryPerProduct,
     * or with status {@code 400 (Bad Request)} if the libraryPerProduct is not valid,
     * or with status {@code 404 (Not Found)} if the libraryPerProduct is not found,
     * or with status {@code 500 (Internal Server Error)} if the libraryPerProduct couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/library-per-products/{id}", consumes = "application/merge-patch+json")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LibraryPerProduct> partialUpdateLibraryPerProduct(
        @PathVariable(value = "id", required = false) final Long id,
        @RequestBody LibraryPerProduct libraryPerProduct
    ) throws URISyntaxException {
        return super.partialUpdateLibraryPerProduct(id, libraryPerProduct);
    }

    /**
     * {@code GET  /library-per-products} : get all the libraryPerProducts.
     *
     * @param pageable the pagination information.
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of libraryPerProducts in body.
     */
    @GetMapping("/library-per-products")
    public ResponseEntity<List<LibraryPerProduct>> getAllLibraryPerProducts(
        LibraryPerProductCustomCriteria criteria,
        @org.springdoc.api.annotations.ParameterObject Pageable pageable
    ) {
        log.debug("REST request to get LibraryPerProducts by criteria: {}", criteria);
        Page<LibraryPerProduct> page = libraryPerProductQueryCustomService.findByCriteria(criteria, pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);
        return ResponseEntity.ok().headers(headers).body(page.getContent());
    }

    /**
     * {@code GET  /library-per-products/count} : count all the libraryPerProducts.
     *
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the count in body.
     */
    @GetMapping("/library-per-products/count")
    public ResponseEntity<Long> countLibraryPerProducts(LibraryPerProductCustomCriteria criteria) {
        log.debug("REST request to count LibraryPerProducts by criteria: {}", criteria);
        return ResponseEntity.ok().body(libraryPerProductQueryCustomService.countByCriteria(criteria));
    }

    /**
     * {@code DELETE  /library-per-products/:id} : delete the "id" libraryPerProduct.
     *
     * @param id the id of the libraryPerProduct to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/library-per-products/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Void> deleteLibraryPerProduct(@PathVariable Long id) {
        return super.deleteLibraryPerProduct(id);
    }
}
