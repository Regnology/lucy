package net.regnology.lucy.web.rest.v1;

import java.net.URISyntaxException;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import net.regnology.lucy.domain.LicenseConflict;
import net.regnology.lucy.repository.LicenseConflictRepository;
import net.regnology.lucy.web.rest.LicenseConflictResource;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

/**
 * Custom REST controller for managing {@link LicenseConflict}
 * where changes are inserted that are different from the base class generated by the JHipster generator.<br>
 * API base path: {@code /api/v1}
 */
@RestController
@RequestMapping("/api/v1")
@Transactional
public class LicenseConflictCustomResource extends LicenseConflictResource {

    public LicenseConflictCustomResource(LicenseConflictRepository licenseConflictRepository) {
        super(licenseConflictRepository);
    }

    /**
     * {@code POST  /license-conflicts} : Create a new licenseConflict.
     *
     * @param licenseConflict the licenseConflict to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new licenseConflict, or with status {@code 400 (Bad Request)} if the licenseConflict has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/license-conflicts")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LicenseConflict> createLicenseConflict(@Valid @RequestBody LicenseConflict licenseConflict)
        throws URISyntaxException {
        return super.createLicenseConflict(licenseConflict);
    }

    /**
     * {@code PUT  /license-conflicts/:id} : Updates an existing licenseConflict.
     *
     * @param id the id of the licenseConflict to save.
     * @param licenseConflict the licenseConflict to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated licenseConflict,
     * or with status {@code 400 (Bad Request)} if the licenseConflict is not valid,
     * or with status {@code 500 (Internal Server Error)} if the licenseConflict couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/license-conflicts/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LicenseConflict> updateLicenseConflict(
        @PathVariable(value = "id", required = false) final Long id,
        @Valid @RequestBody LicenseConflict licenseConflict
    ) throws URISyntaxException {
        return super.updateLicenseConflict(id, licenseConflict);
    }

    /**
     * {@code PATCH  /license-conflicts/:id} : Partial updates given fields of an existing licenseConflict, field will ignore if it is null
     *
     * @param id the id of the licenseConflict to save.
     * @param licenseConflict the licenseConflict to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated licenseConflict,
     * or with status {@code 400 (Bad Request)} if the licenseConflict is not valid,
     * or with status {@code 404 (Not Found)} if the licenseConflict is not found,
     * or with status {@code 500 (Internal Server Error)} if the licenseConflict couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/license-conflicts/{id}", consumes = { "application/json", "application/merge-patch+json" })
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LicenseConflict> partialUpdateLicenseConflict(
        @PathVariable(value = "id", required = false) final Long id,
        @NotNull @RequestBody LicenseConflict licenseConflict
    ) throws URISyntaxException {
        return super.partialUpdateLicenseConflict(id, licenseConflict);
    }

    /**
     * {@code DELETE  /license-conflicts/:id} : delete the "id" licenseConflict.
     *
     * @param id the id of the licenseConflict to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/license-conflicts/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Void> deleteLicenseConflict(@PathVariable Long id) {
        return super.deleteLicenseConflict(id);
    }
}
