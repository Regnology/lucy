package net.regnology.lucy.web.rest.v1;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Objects;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import net.regnology.lucy.domain.File;
import net.regnology.lucy.domain.License;
import net.regnology.lucy.domain.enumeration.ExportFormat;
import net.regnology.lucy.repository.LicenseCustomRepository;
import net.regnology.lucy.service.LicenseCustomService;
import net.regnology.lucy.service.LicenseQueryCustomService;
import net.regnology.lucy.service.criteria.LicenseCustomCriteria;
import net.regnology.lucy.service.dto.LicenseConflictSimpleDTO;
import net.regnology.lucy.service.dto.LicenseConflictWithRiskDTO;
import net.regnology.lucy.service.dto.LicenseSimpleDTO;
import net.regnology.lucy.service.exceptions.ExportException;
import net.regnology.lucy.service.exceptions.LicenseException;
import net.regnology.lucy.web.rest.LicenseResource;
import net.regnology.lucy.web.rest.errors.BadRequestAlertException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springdoc.api.annotations.ParameterObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import tech.jhipster.web.util.HeaderUtil;
import tech.jhipster.web.util.PaginationUtil;

/**
 * Custom REST controller for managing {@link License}
 * where changes are inserted that are different from the base class generated by the JHipster generator.<br>
 * API base path: {@code /api/v1}
 */
@RestController("LicenseCustomResource")
@RequestMapping("/api/v1")
public class LicenseCustomResource extends LicenseResource {

    private static final Logger log = LoggerFactory.getLogger(LicenseCustomResource.class);

    private static final String ENTITY_NAME = "license";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final LicenseCustomService licenseService;
    private final LicenseCustomRepository licenseRepository;
    private final LicenseQueryCustomService licenseQueryService;

    public LicenseCustomResource(
        LicenseCustomService licenseService,
        LicenseCustomRepository licenseRepository,
        LicenseQueryCustomService licenseQueryService
    ) {
        super(licenseService, licenseRepository, licenseQueryService);
        this.licenseService = licenseService;
        this.licenseRepository = licenseRepository;
        this.licenseQueryService = licenseQueryService;
    }

    /**
     * {@code POST  /licenses} : Create a new license.
     *
     * @param license the license to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new license,
     * or with status {@code 400 (Bad Request)} if the license has already an ID or the license check fails.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/licenses")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<License> createLicense(@Valid @RequestBody License license) throws URISyntaxException {
        log.debug("REST request to save License : {}", license);
        if (license.getId() != null) {
            throw new BadRequestAlertException("A new license cannot already have an ID", ENTITY_NAME, "idexists");
        }
        try {
            License result = licenseService.saveWithCheck(license);
            licenseService.createLicenseConflictsForNewLicense(result);
            licenseService.createLicenseConflictsForExistingLicenses(result);

            return ResponseEntity
                .created(new URI("/api/licenses/" + result.getId()))
                .headers(HeaderUtil.createEntityCreationAlert(applicationName, false, ENTITY_NAME, result.getId().toString()))
                .body(result);
        } catch (LicenseException e) {
            throw new BadRequestAlertException(e.getMessage(), ENTITY_NAME, "licenseerror");
        }
    }

    /**
     * {@code PUT  /licenses/:id} : Updates an existing license.
     *
     * @param id      the id of the license to save.
     * @param license the license to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated license,
     * or with status {@code 400 (Bad Request)} if the license is not valid or the license check fails,
     * or with status {@code 500 (Internal Server Error)} if the license couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/licenses/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<License> updateLicense(
        @PathVariable(value = "id", required = false) final Long id,
        @Valid @RequestBody License license
    ) throws URISyntaxException {
        log.debug("REST request to update License : {}, {}", id, license);
        if (license.getId() == null) {
            throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
        }
        if (!Objects.equals(id, license.getId())) {
            throw new BadRequestAlertException("Invalid ID", ENTITY_NAME, "idinvalid");
        }

        if (!licenseRepository.existsById(id)) {
            throw new BadRequestAlertException("Entity not found", ENTITY_NAME, "idnotfound");
        }

        try {
            License result = licenseService.saveWithCheck(license);

            return ResponseEntity
                .ok()
                .headers(HeaderUtil.createEntityUpdateAlert(applicationName, false, ENTITY_NAME, license.getId().toString()))
                .body(result);
        } catch (LicenseException e) {
            throw new BadRequestAlertException(e.getMessage(), ENTITY_NAME, "licenseerror");
        }
    }

    /**
     * {@code PATCH  /licenses/:id} : Partial updates given fields of an existing license, field will ignore if it is null
     *
     * @param id      the id of the license to save.
     * @param license the license to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated license,
     * or with status {@code 400 (Bad Request)} if the license is not valid,
     * or with status {@code 404 (Not Found)} if the license is not found,
     * or with status {@code 500 (Internal Server Error)} if the license couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/licenses/{id}", consumes = "application/merge-patch+json")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<License> partialUpdateLicense(
        @PathVariable(value = "id", required = false) final Long id,
        @NotNull @RequestBody License license
    ) throws URISyntaxException {
        return super.partialUpdateLicense(id, license);
    }

    /**
     * {@code GET  /licenses} : get all the licenses.
     *
     * @param pageable the pagination information.
     * @param criteria the criteria which the requested entities should match.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of licenses in body.
     */
    @GetMapping("/licenses")
    public ResponseEntity<List<License>> getAllLicenses(LicenseCustomCriteria criteria, @ParameterObject Pageable pageable) {
        log.debug("REST request to get Licenses by criteria: {}", criteria);
        Page<License> page = licenseQueryService.findByCriteria(criteria, pageable);
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), page);
        return ResponseEntity.ok().headers(headers).body(page.getContent());
    }

    /**
     * {@code DELETE  /licenses/:id} : delete the "id" license.
     *
     * @param id the id of the license to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/licenses/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Void> deleteLicense(@PathVariable Long id) {
        log.debug("REST request to delete License : {}", id);
        licenseService.delete(id);
        return ResponseEntity
            .noContent()
            .headers(HeaderUtil.createEntityDeletionAlert(applicationName, false, ENTITY_NAME, id.toString()))
            .build();
    }

    /**
     * {@code GET /licenses/export} : Export all license entries.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body a {@link File} with licenses,
     * or with status {@code 400 (Bad Request)} if licenses could not be serialized.
     */
    @GetMapping("/licenses/export")
    public ResponseEntity<File> exportLicenses(@RequestParam(value = "format", required = false) String format) {
        log.debug("REST request to export license table as : {}", format);
        ExportFormat exportFormat = ExportFormat.getExportFormatByValue(format.toLowerCase());

        if (exportFormat == null) throw new BadRequestAlertException("Unsupported export format", ENTITY_NAME, "exporterror");

        try {
            HttpHeaders headers = new HttpHeaders();
            headers.add("Content-Disposition", "attachment; filename=\"licenses.json\"; filename*=\"licenses.json\"");
            return ResponseEntity.ok().headers(headers).body(licenseService.export(exportFormat));
        } catch (ExportException e) {
            throw new BadRequestAlertException(e.getMessage(), ENTITY_NAME, "exporterror");
        }
    }

    /**
     * {@code GET /licenses/:id/license-conflicts} :
     *
     * @param id License ID
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body a list of
     * {@link LicenseConflictSimpleDTO LicenseConflictSimpleDTOs}.
     */
    @GetMapping("/licenses/{id}/license-conflicts")
    public ResponseEntity<List<LicenseConflictSimpleDTO>> fetchLicenseConflicts(@PathVariable Long id) {
        log.debug("REST request to get license conflicts by ID : {}", id);

        return ResponseEntity.ok().body(licenseService.fetchLicenseConflicts(id));
    }

    /**
     * {@code GET /licenses/:id/license-conflicts-with-risk} :
     *
     * @param id License ID
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body a list of
     * {@link LicenseConflictWithRiskDTO LicenseConflictWithRiskDTOs}.
     */
    @GetMapping("/licenses/{id}/license-conflicts-with-risk")
    public ResponseEntity<List<LicenseConflictWithRiskDTO>> fetchLicenseConflictsWithRisk(@PathVariable Long id) {
        log.debug("REST request to get license conflicts by ID : {}", id);

        return ResponseEntity.ok().body(licenseService.fetchLicenseConflictsWithRisk(id));
    }

    /**
     * {@code GET /licenses/license-names} :
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body a list of
     * {@link LicenseSimpleDTO LicenseSimpleDTOs}.
     */
    @GetMapping("/licenses/license-names")
    public ResponseEntity<List<LicenseSimpleDTO>> getAllLicenseNames() {
        log.debug("REST request to get all license names");

        return ResponseEntity.ok().body(licenseService.findAllSimpleDTO());
    }
}
