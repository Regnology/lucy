package net.regnology.lucy.web.rest.v1;

import java.net.URISyntaxException;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import net.regnology.lucy.domain.LicenseRisk;
import net.regnology.lucy.repository.LicenseRiskCustomRepository;
import net.regnology.lucy.web.rest.LicenseRiskResource;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;

/**
 * Custom REST controller for managing {@link LicenseRisk}
 * where changes are inserted that are different from the base class generated by the JHipster generator.<br>
 * API base path: {@code /api/v1}
 */
@RestController
@RequestMapping("/api/v1")
public class LicenseRiskCustomResource extends LicenseRiskResource {

    public LicenseRiskCustomResource(LicenseRiskCustomRepository licenseRiskRepository) {
        super(licenseRiskRepository);
    }

    /**
     * {@code POST  /license-risks} : Create a new licenseRisk.
     *
     * @param licenseRisk the licenseRisk to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new licenseRisk, or with status {@code 400 (Bad Request)} if the licenseRisk has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/license-risks")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LicenseRisk> createLicenseRisk(@Valid @RequestBody LicenseRisk licenseRisk) throws URISyntaxException {
        return super.createLicenseRisk(licenseRisk);
    }

    /**
     * {@code PUT  /license-risks/:id} : Updates an existing licenseRisk.
     *
     * @param id          the id of the licenseRisk to save.
     * @param licenseRisk the licenseRisk to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated licenseRisk,
     * or with status {@code 400 (Bad Request)} if the licenseRisk is not valid,
     * or with status {@code 500 (Internal Server Error)} if the licenseRisk couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/license-risks/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LicenseRisk> updateLicenseRisk(
        @PathVariable(value = "id", required = false) final Long id,
        @Valid @RequestBody LicenseRisk licenseRisk
    ) throws URISyntaxException {
        return super.updateLicenseRisk(id, licenseRisk);
    }

    /**
     * {@code PATCH  /license-risks/:id} : Partial updates given fields of an existing licenseRisk, field will ignore if it is null
     *
     * @param id          the id of the licenseRisk to save.
     * @param licenseRisk the licenseRisk to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated licenseRisk,
     * or with status {@code 400 (Bad Request)} if the licenseRisk is not valid,
     * or with status {@code 404 (Not Found)} if the licenseRisk is not found,
     * or with status {@code 500 (Internal Server Error)} if the licenseRisk couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/license-risks/{id}", consumes = "application/merge-patch+json")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<LicenseRisk> partialUpdateLicenseRisk(
        @PathVariable(value = "id", required = false) final Long id,
        @NotNull @RequestBody LicenseRisk licenseRisk
    ) throws URISyntaxException {
        return super.partialUpdateLicenseRisk(id, licenseRisk);
    }

    /**
     * {@code DELETE  /license-risks/:id} : delete the "id" licenseRisk.
     *
     * @param id the id of the licenseRisk to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/license-risks/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Void> deleteLicenseRisk(@PathVariable Long id) {
        return super.deleteLicenseRisk(id);
    }
}
