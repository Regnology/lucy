package net.regnology.lucy.web.rest.v1;

import java.net.URISyntaxException;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import net.regnology.lucy.domain.Requirement;
import net.regnology.lucy.repository.RequirementCustomRepository;
import net.regnology.lucy.web.rest.RequirementResource;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.*;

/**
 * Custom REST controller for managing {@link Requirement}
 * where changes are inserted that are different from the base class generated by the JHipster generator.<br>
 * API base path: {@code /api/v1}
 */
@RestController
@RequestMapping("/api/v1")
public class RequirementCustomResource extends RequirementResource {

    public RequirementCustomResource(RequirementCustomRepository requirementRepository) {
        super(requirementRepository);
    }

    /**
     * {@code POST  /requirements} : Create a new requirement.
     *
     * @param requirement the requirement to create.
     * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new requirement, or with status {@code 400 (Bad Request)} if the requirement has already an ID.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PostMapping("/requirements")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Requirement> createRequirement(@Valid @RequestBody Requirement requirement) throws URISyntaxException {
        return super.createRequirement(requirement);
    }

    /**
     * {@code PUT  /requirements/:id} : Updates an existing requirement.
     *
     * @param id          the id of the requirement to save.
     * @param requirement the requirement to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated requirement,
     * or with status {@code 400 (Bad Request)} if the requirement is not valid,
     * or with status {@code 500 (Internal Server Error)} if the requirement couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PutMapping("/requirements/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Requirement> updateRequirement(
        @PathVariable(value = "id", required = false) final Long id,
        @Valid @RequestBody Requirement requirement
    ) throws URISyntaxException {
        return super.updateRequirement(id, requirement);
    }

    /**
     * {@code PATCH  /requirements/:id} : Partial updates given fields of an existing requirement, field will ignore if it is null
     *
     * @param id          the id of the requirement to save.
     * @param requirement the requirement to update.
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated requirement,
     * or with status {@code 400 (Bad Request)} if the requirement is not valid,
     * or with status {@code 404 (Not Found)} if the requirement is not found,
     * or with status {@code 500 (Internal Server Error)} if the requirement couldn't be updated.
     * @throws URISyntaxException if the Location URI syntax is incorrect.
     */
    @PatchMapping(value = "/requirements/{id}", consumes = "application/merge-patch+json")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Requirement> partialUpdateRequirement(
        @PathVariable(value = "id", required = false) final Long id,
        @NotNull @RequestBody Requirement requirement
    ) throws URISyntaxException {
        return super.partialUpdateRequirement(id, requirement);
    }

    /**
     * {@code DELETE  /requirements/:id} : delete the "id" requirement.
     *
     * @param id the id of the requirement to delete.
     * @return the {@link ResponseEntity} with status {@code 204 (NO_CONTENT)}.
     */
    @DeleteMapping("/requirements/{id}")
    @Secured({ "ROLE_ADMIN", "ROLE_USER" })
    public ResponseEntity<Void> deleteRequirement(@PathVariable Long id) {
        return super.deleteRequirement(id);
    }
}
